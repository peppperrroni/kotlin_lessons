package oop.exercises

/**
 * Упражнения по теме "Корутины и асинхронное программирование в Kotlin"
 * 
 * Примечание: Для выполнения этих упражнений вам потребуется добавить зависимость на библиотеку корутин:
 * implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
 */

/**
 * Упражнение 1: Основы корутин
 * 
 * Создайте простую корутину, которая:
 * - Запускается в GlobalScope
 * - Выводит "Начало корутины"
 * - Делает задержку на 1 секунду
 * - Выводит "Конец корутины"
 * 
 * В основном потоке:
 * - Выведите "Начало программы"
 * - Запустите корутину
 * - Выведите "Конец программы"
 * - Добавьте задержку на 2 секунды, чтобы корутина успела завершиться
 */
class Exercise1 {
    // your solution
    
    // Демонстрация основ корутин
    fun demonstrateBasicCoroutines() {
        // your solution
    }
}

/**
 * Упражнение 2: Билдеры корутин
 * 
 * Реализуйте примеры использования различных билдеров корутин:
 * - launch: запустите несколько корутин и дождитесь их завершения
 * - async: запустите несколько асинхронных задач и соберите их результаты
 * - runBlocking: используйте для блокирования основного потока до завершения корутин
 * - coroutineScope: создайте область видимости корутин и запустите в ней несколько корутин
 */
class Exercise2 {
    // your solution
    
    // Демонстрация билдеров корутин
    fun demonstrateCoroutineBuilders() {
        // your solution
    }
}

/**
 * Упражнение 3: Контекст и диспетчеры корутин
 * 
 * Реализуйте примеры использования различных контекстов и диспетчеров:
 * - Dispatchers.Default: для вычислительно-интенсивных задач
 * - Dispatchers.IO: для операций ввода-вывода
 * - Dispatchers.Main: для операций пользовательского интерфейса (в Android)
 * - newSingleThreadContext: для создания собственного однопоточного диспетчера
 * 
 * Продемонстрируйте переключение между контекстами с помощью withContext.
 */
class Exercise3 {
    // your solution
    
    // Демонстрация контекста и диспетчеров корутин
    fun demonstrateCoroutineContextAndDispatchers() {
        // your solution
    }
}

/**
 * Упражнение 4: Job и структурированная конкурентность
 * 
 * Реализуйте примеры работы с Job:
 * - Создайте Job и запустите в нем несколько корутин
 * - Отмените Job и проверьте, что все дочерние корутины также отменяются
 * - Используйте join для ожидания завершения Job
 * - Используйте isActive для проверки активности корутины
 * - Реализуйте обработку отмены корутины
 */
class Exercise4 {
    // your solution
    
    // Демонстрация Job и структурированной конкурентности
    fun demonstrateJobAndStructuredConcurrency() {
        // your solution
    }
}

/**
 * Упражнение 5: Отмена и таймауты
 * 
 * Реализуйте примеры отмены корутин и использования таймаутов:
 * - Отмените корутину вручную с помощью Job.cancel()
 * - Используйте withTimeout для автоматической отмены корутины по истечении времени
 * - Используйте withTimeoutOrNull для получения null вместо исключения при истечении времени
 * - Реализуйте корутину, которая корректно обрабатывает отмену и освобождает ресурсы
 */
class Exercise5 {
    // your solution
    
    // Демонстрация отмены и таймаутов
    fun demonstrateCancellationAndTimeouts() {
        // your solution
    }
}

/**
 * Упражнение 6: Каналы
 * 
 * Реализуйте примеры использования каналов:
 * - Создайте канал и отправьте в него несколько значений
 * - Получите значения из канала
 * - Используйте produce для создания канала-производителя
 * - Используйте consumeEach для потребления значений из канала
 * - Реализуйте пример с несколькими производителями и одним потребителем
 * - Реализуйте пример с одним производителем и несколькими потребителями
 */
class Exercise6 {
    // your solution
    
    // Демонстрация каналов
    fun demonstrateChannels() {
        // your solution
    }
}

/**
 * Упражнение 7: Flow
 * 
 * Реализуйте примеры использования Flow:
 * - Создайте простой Flow с помощью flow { ... }
 * - Используйте операторы map, filter, transform
 * - Соберите значения из Flow с помощью collect
 * - Используйте flowOn для изменения контекста выполнения
 * - Реализуйте обработку ошибок с помощью catch и retry
 * - Используйте combine для объединения нескольких Flow
 */
class Exercise7 {
    // your solution
    
    // Демонстрация Flow
    fun demonstrateFlow() {
        // your solution
    }
}

/**
 * Упражнение 8: Исключения и обработка ошибок
 * 
 * Реализуйте примеры обработки исключений в корутинах:
 * - Используйте try-catch внутри корутины
 * - Используйте CoroutineExceptionHandler для обработки необработанных исключений
 * - Продемонстрируйте распространение исключений в иерархии корутин
 * - Используйте supervisorScope для предотвращения отмены всех дочерних корутин при ошибке в одной из них
 */
class Exercise8 {
    // your solution
    
    // Демонстрация исключений и обработки ошибок
    fun demonstrateExceptionHandling() {
        // your solution
    }
}

/**
 * Упражнение 9: Совместное использование состояния
 * 
 * Реализуйте примеры безопасного совместного использования состояния в корутинах:
 * - Используйте Mutex для защиты доступа к общему ресурсу
 * - Используйте атомарные операции (AtomicInteger, AtomicReference)
 * - Используйте конфайнмент (ограничение доступа к состоянию одним потоком)
 * - Реализуйте пример с использованием акторов для безопасного изменения состояния
 */
class Exercise9 {
    // your solution
    
    // Демонстрация совместного использования состояния
    fun demonstrateSharedState() {
        // your solution
    }
}

/**
 * Упражнение 10: Практическое приложение
 * 
 * Реализуйте простое приложение, которое демонстрирует использование корутин в реальном сценарии:
 * - Создайте имитацию сервиса, который выполняет "сетевые" запросы с задержкой
 * - Реализуйте кэширование результатов запросов
 * - Реализуйте параллельное выполнение нескольких запросов
 * - Реализуйте обработку ошибок и повторные попытки
 * - Реализуйте отмену запросов при необходимости
 * - Используйте Flow для отображения прогресса выполнения запросов
 */
class Exercise10 {
    // your solution
    
    // Демонстрация практического приложения
    fun demonstratePracticalApplication() {
        // your solution
    }
} 