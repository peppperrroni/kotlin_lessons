/**
 * Задания по теме "Функции в Kotlin"
 */

/**
 * Задача 1: Простая функция
 * 
 * Создайте функцию, которая принимает два целых числа и возвращает их сумму.
 */
class Solution1 {
    fun sum(a: Int, b: Int): Int {
        // your solution
    }
}

/**
 * Задача 2: Функция с параметрами по умолчанию
 * 
 * Создайте функцию, которая приветствует пользователя. Функция должна принимать:
 * - имя пользователя (обязательный параметр)
 * - приветствие (параметр по умолчанию "Привет")
 * - знак препинания (параметр по умолчанию "!")
 * 
 * Функция должна возвращать строку в формате: "{приветствие}, {имя}{знак препинания}"
 */
class Solution2 {
    fun greet(name: String, greeting: String = "Привет", punctuation: String = "!"): String {
        // your solution
    }
}

/**
 * Задача 3: Функция с переменным числом аргументов (vararg)
 * 
 * Создайте функцию, которая принимает переменное число целых чисел и возвращает их среднее арифметическое.
 * Если аргументы не переданы, функция должна вернуть 0.0.
 */
class Solution3 {
    fun average(vararg numbers: Int): Double {
        // your solution
    }
}

/**
 * Задача 4: Однострочная функция
 * 
 * Создайте функцию, которая проверяет, является ли число четным.
 * Используйте синтаксис однострочной функции (без фигурных скобок и оператора return).
 */
class Solution4 {
    fun isEven(number: Int): Boolean = // your solution
}

/**
 * Задача 5: Функция-расширение
 * 
 * Создайте функцию-расширение для класса String, которая подсчитывает количество гласных букв в строке.
 * Гласными считаются буквы: a, e, i, o, u (в любом регистре).
 */
class Solution5 {
    fun String.countVowels(): Int {
        // your solution
    }
    
    // Пример использования функции-расширения
    fun countVowelsInString(input: String): Int {
        return input.countVowels()
    }
}

/**
 * Задача 6: Функция высшего порядка
 * 
 * Создайте функцию высшего порядка, которая принимает список целых чисел и функцию-предикат.
 * Функция должна возвращать список чисел, для которых предикат возвращает true.
 */
class Solution6 {
    fun filter(numbers: List<Int>, predicate: (Int) -> Boolean): List<Int> {
        // your solution
    }
    
    // Пример использования функции высшего порядка
    fun getEvenNumbers(numbers: List<Int>): List<Int> {
        return filter(numbers) { it % 2 == 0 }
    }
}

/**
 * Задача 7: Инфиксная функция
 * 
 * Создайте инфиксную функцию-расширение для класса Int, которая проверяет,
 * делится ли одно число на другое без остатка.
 */
class Solution7 {
    infix fun Int.isDivisibleBy(divisor: Int): Boolean {
        // your solution
    }
    
    // Пример использования инфиксной функции
    fun checkDivisibility(a: Int, b: Int): Boolean {
        return a isDivisibleBy b
    }
}

/**
 * Задача 8: Локальные функции
 * 
 * Создайте функцию, которая находит наибольший общий делитель (НОД) двух чисел.
 * Используйте локальную функцию для реализации алгоритма Евклида.
 */
class Solution8 {
    fun gcd(a: Int, b: Int): Int {
        // your solution
    }
}

/**
 * Задача 9: Функция с именованными аргументами
 * 
 * Создайте функцию, которая форматирует информацию о человеке.
 * Функция должна принимать имя, возраст и город (все параметры обязательные).
 * Верните строку в формате: "Имя: {имя}, Возраст: {возраст}, Город: {город}".
 * 
 * Продемонстрируйте вызов этой функции с использованием именованных аргументов.
 */
class Solution9 {
    fun formatPersonInfo(name: String, age: Int, city: String): String {
        // your solution
    }
    
    // Пример использования функции с именованными аргументами
    fun getPersonInfo(): String {
        return formatPersonInfo(
            name = "Иван",
            age = 30,
            city = "Москва"
        )
    }
}

/**
 * Задача 10: Рекурсивная функция
 * 
 * Создайте рекурсивную функцию для вычисления чисел Фибоначчи.
 * Функция должна принимать целое число n и возвращать n-ое число Фибоначчи.
 * 
 * Примечание: для больших значений n рекурсивное решение может быть неэффективным.
 * Для учебных целей ограничимся небольшими значениями n.
 */
class Solution10 {
    fun fibonacci(n: Int): Int {
        // your solution
    }
} 